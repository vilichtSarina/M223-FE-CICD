[{"C:\\Work\\M223\\M223-FE-CICD\\src\\index.tsx":"1","C:\\Work\\M223\\M223-FE-CICD\\src\\App.tsx":"2","C:\\Work\\M223\\M223-FE-CICD\\src\\Contexts\\ActiveUserContext.tsx":"3","C:\\Work\\M223\\M223-FE-CICD\\src\\Router\\Router.tsx":"4","C:\\Work\\M223\\M223-FE-CICD\\src\\Services\\AuthorityService.ts":"5","C:\\Work\\M223\\M223-FE-CICD\\src\\Services\\UserService.ts":"6","C:\\Work\\M223\\M223-FE-CICD\\src\\config\\Api.ts":"7","C:\\Work\\M223\\M223-FE-CICD\\src\\config\\Authorities.ts":"8","C:\\Work\\M223\\M223-FE-CICD\\src\\Router\\PrivateRoute.tsx":"9","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\LoginPage\\LoginPage.tsx":"10","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\HomePage.tsx":"11","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\UserPage\\UserTable.tsx":"12","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\UserPage\\UserPage.tsx":"13","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\LandingPage\\LandingPage.tsx":"14","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\DetailPage\\DetailPage.tsx":"15","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\ErrorPages\\Unauthorized.tsx":"16","C:\\Work\\M223\\M223-FE-CICD\\src\\Services\\AlertService.ts":"17","C:\\Work\\M223\\M223-FE-CICD\\src\\Services\\PostService.ts":"18","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\organisms\\Navbar.tsx":"19","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\organisms\\UserInfo.tsx":"20","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\organisms\\Content.tsx":"21","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\organisms\\AddPost.tsx":"22","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\molecules\\UserForm\\UserForm.tsx":"23","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\molecules\\UserCard.tsx":"24","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\molecules\\Post.tsx":"25","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\molecules\\PostLikeDialog.tsx":"26","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\molecules\\PostEditForm.tsx":"27"},{"size":382,"mtime":1677162036226,"results":"28","hashOfConfig":"29"},{"size":559,"mtime":1678373130717,"results":"30","hashOfConfig":"29"},{"size":6775,"mtime":1677827544904,"results":"31","hashOfConfig":"29"},{"size":3001,"mtime":1677829906134,"results":"32","hashOfConfig":"29"},{"size":1179,"mtime":1677827544909,"results":"33","hashOfConfig":"29"},{"size":678,"mtime":1677251437717,"results":"34","hashOfConfig":"29"},{"size":1817,"mtime":1677162036224,"results":"35","hashOfConfig":"29"},{"size":251,"mtime":1677827544931,"results":"36","hashOfConfig":"29"},{"size":2259,"mtime":1677827544905,"results":"37","hashOfConfig":"29"},{"size":3076,"mtime":1677827544929,"results":"38","hashOfConfig":"29"},{"size":769,"mtime":1678373324127,"results":"39","hashOfConfig":"29"},{"size":2263,"mtime":1677827544931,"results":"40","hashOfConfig":"29"},{"size":1122,"mtime":1677649468490,"results":"41","hashOfConfig":"29"},{"size":3225,"mtime":1677827544927,"results":"42","hashOfConfig":"29"},{"size":2614,"mtime":1677827544922,"results":"43","hashOfConfig":"29"},{"size":417,"mtime":1677251437733,"results":"44","hashOfConfig":"29"},{"size":810,"mtime":1677827544908,"results":"45","hashOfConfig":"29"},{"size":837,"mtime":1677827544910,"results":"46","hashOfConfig":"29"},{"size":2512,"mtime":1677827544919,"results":"47","hashOfConfig":"29"},{"size":330,"mtime":1677649468485,"results":"48","hashOfConfig":"29"},{"size":1818,"mtime":1677827544917,"results":"49","hashOfConfig":"29"},{"size":2995,"mtime":1677827544917,"results":"50","hashOfConfig":"29"},{"size":3376,"mtime":1677827544916,"results":"51","hashOfConfig":"29"},{"size":757,"mtime":1677649468482,"results":"52","hashOfConfig":"29"},{"size":4291,"mtime":1677827544911,"results":"53","hashOfConfig":"29"},{"size":1201,"mtime":1677827544913,"results":"54","hashOfConfig":"29"},{"size":3614,"mtime":1677827544912,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"57zaup",{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Work\\M223\\M223-FE-CICD\\src\\index.tsx",[],["113","114"],"C:\\Work\\M223\\M223-FE-CICD\\src\\App.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\Contexts\\ActiveUserContext.tsx",["115"],"import { createContext, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport api from \"../config/Api\";\r\nimport roles from \"../config/Roles\";\r\nimport AuthorityService from \"../Services/AuthorityService\";\r\nimport UserService from \"../Services/UserService\";\r\nimport { User } from \"../types/models/User.model\";\r\nimport { Nullable } from \"../types/Nullable\";\r\n\r\n/**\r\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\r\n * activeUser gets stored.\r\n */\r\nexport const USER_DATA_LOCAL_STORAGE_KEY = \"user\";\r\nexport const TOKEN_LOCAL_STORAGE_KEY = \"token\";\r\n\r\n/**\r\n * ActiveUserContextType defines the provided values\r\n */\r\nexport type ActiveUserContextType = {\r\n  user: Nullable<User>;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  setActiveUser: (user: User) => void;\r\n  loadActiveUser: () => void;\r\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\r\n  isAuthorOrAdmin: (userToCheck: User, authorId: string) => boolean;\r\n  isAdmin: () => boolean;\r\n};\r\n\r\n/**\r\n * noContextProviderFound is a method that throws an error and is used\r\n * inside the defaultContextValue\r\n */\r\nconst noContextProviderFound = () => {\r\n  throw new Error(\"No provider for the ActiveUserContext found\");\r\n};\r\n\r\n/**\r\n * defaultContextValue defines the default values for the ActiveUserContext.\r\n */\r\nconst defaultContextValue: ActiveUserContextType = {\r\n  user: null,\r\n  login: noContextProviderFound,\r\n  logout: noContextProviderFound,\r\n  setActiveUser: noContextProviderFound,\r\n  loadActiveUser: noContextProviderFound,\r\n  checkRole: noContextProviderFound,\r\n  isAuthorOrAdmin: noContextProviderFound,\r\n  isAdmin: noContextProviderFound,\r\n};\r\n\r\n/**\r\n * ActiveUserContext has the purpose of providing the currently active user\r\n * as well as related values, modifiers and related operations such as login\r\n * and logout.\r\n */\r\nconst ActiveUserContext =\r\n  createContext<ActiveUserContextType>(defaultContextValue);\r\nexport default ActiveUserContext;\r\n\r\n/**\r\n * Props for the ActiveUserContextProvider Component\r\n */\r\ntype ActiveUserContextProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\r\n * to all child-components.\r\n * @param children consists of all the elements that are located inside the\r\n */\r\nexport const ActiveUserContextProvider = ({\r\n  children,\r\n}: ActiveUserContextProviderProps) => {\r\n  /**\r\n   * Try to load the user data that is stored inside the LocalStorage.\r\n   * If non is present, null will be returned.\r\n   */\r\n  const loadSavedUserData = (): Nullable<User> => {\r\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\r\n    if (storeUser === null) return null;\r\n    return JSON.parse(storeUser);\r\n  };\r\n\r\n  // The following line defines the user state which is holding the user\r\n  // data inside this context.\r\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\r\n  const navigate = useNavigate();\r\n  /**\r\n   * Update the user that is provided by the ActiveUserContext\r\n   * @param updatedUser\r\n   */\r\n  const setActiveUser = (updatedUser: User) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem(\r\n      USER_DATA_LOCAL_STORAGE_KEY,\r\n      JSON.stringify(updatedUser)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Remove all user and authorization related data from the localStorage\r\n   */\r\n  const resetAuthorization = () => {\r\n    // Reset the stored data inside the AuthorityService.\r\n    AuthorityService.clearAuthorities();\r\n    // Clear all data from the localStorage.\r\n    localStorage.clear();\r\n    // Set the user, which is stored inside the context to null.\r\n    setUser(null);\r\n  };\r\n\r\n  /**\r\n   * Logout the currently active user by resetting the stored user data\r\n   * and redirecting to the LoginPage.\r\n   */\r\n  const logout = () => {\r\n    // If no token is saved inside the local storage clear the localStorage directly\r\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\r\n      resetAuthorization();\r\n      return;\r\n    }\r\n    // If a token is present send a logout-request and clear the localStorage afterwards\r\n    api.get(\"/logout\").finally(resetAuthorization);\r\n    //navigate to login page\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  /**\r\n   * Login with the provided credentials. If successful the current user gets\r\n   * updated and stored inside the context. Also the JWT-Token for further\r\n   * request based authentication is stored inside the localStorage.\r\n   * @param email\r\n   * @param password\r\n   */\r\n  const login = async (email: string, password: string) => {\r\n    await api.post(\"user/login\", { email, password }).then((response: any) => {\r\n      console.log(response.headers.authorization);\r\n      localStorage.setItem(\r\n        TOKEN_LOCAL_STORAGE_KEY,\r\n        response.headers.authorization\r\n      );\r\n      setActiveUser(response.data);\r\n      return true;\r\n    });\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Request the user data for the currently active user from the api\r\n   * and save it to the context-state.\r\n   */\r\n  const loadActiveUser = () => {\r\n    return user\r\n      ? UserService.getUser(user.id).then((res: any) => {\r\n          setActiveUser(res);\r\n        })\r\n      : null;\r\n  };\r\n\r\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\r\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\r\n  }\r\n\r\n  function isAuthorOrAdmin(userToCheck: User, authorId: string): boolean {\r\n    return activeUserHasRole(\"ADMIN\") || userToCheck.id === authorId;\r\n  }\r\n\r\n  function isAdmin(): boolean {\r\n    return activeUserHasRole(\"ADMIN\");\r\n  }\r\n\r\n  /**\r\n   * Try to load the user-object from the localStorage if present.\r\n   * This is done automatically on the first render of this component.\r\n   */\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\r\n    if (token !== null) {\r\n      loadActiveUser();\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * If the user state is updated and the user is not equal to null,\r\n   * the data used in the AuthorityService as well as the data stored inside\r\n   * the localStorage will be updated with the new user-data.\r\n   */\r\n  useEffect(() => {\r\n    if (user !== null) {\r\n      AuthorityService.initAuthoritySet(user);\r\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <ActiveUserContext.Provider\r\n        value={{\r\n          user,\r\n          setActiveUser,\r\n          login,\r\n          logout,\r\n          loadActiveUser,\r\n          checkRole: activeUserHasRole,\r\n          isAuthorOrAdmin,\r\n          isAdmin\r\n        }}\r\n      >\r\n        {children}\r\n      </ActiveUserContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Work\\M223\\M223-FE-CICD\\src\\Router\\Router.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\Services\\AuthorityService.ts",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\Services\\UserService.ts",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\config\\Api.ts",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\config\\Authorities.ts",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\Router\\PrivateRoute.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\LoginPage\\LoginPage.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\HomePage.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\UserPage\\UserTable.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\UserPage\\UserPage.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\LandingPage\\LandingPage.tsx",["116"],"import \"./LandingPage.css\";\r\nimport Navbar from \"../../organisms/Navbar\";\r\nimport Content from \"../../organisms/Content\";\r\nimport AddPost from \"../../organisms/AddPost\";\r\nimport { useEffect, useState, useContext } from \"react\";\r\nimport {\r\n  Post as PostType,\r\n  UpdatePostDto,\r\n} from \"../../../types/models/Post.model\";\r\nimport postService from \"../../../Services/PostService\";\r\nimport { AxiosError } from \"axios\";\r\nimport UserInfo from \"../../organisms/UserInfo\";\r\nimport ActiveUserContext from \"../../../Contexts/ActiveUserContext\";\r\nimport { Pagination } from \"@mui/material\";\r\nimport alertService from \"../../../Services/AlertService\";\r\n\r\nexport default function LandingPage() {\r\n  const [posts, setPosts] = useState<PostType[]>([]);\r\n  const activeUserContext = useContext(ActiveUserContext);\r\n  const [page, setPage] = useState(0);\r\n  const [pageCount, setPageCount] = useState(1);\r\n\r\n  const getPaginationPosts = () => {\r\n    postService.getPaginationPosts(page, 2).then((response) => {\r\n      setPosts(response.data);\r\n    });\r\n  };\r\n\r\n  const getPaginationCount = () => {\r\n    postService.getAllPosts().then((response) => {\r\n      setPageCount(Math.round(response.data.length / 2));\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPaginationPosts();\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    getPaginationCount();\r\n  }, []);\r\n\r\n  /** handles MUI Pagination Component input */\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value - 1);\r\n  };\r\n\r\n  const onAddPost = (addedPost: UpdatePostDto): void => {\r\n    postService\r\n      .createPost(addedPost)\r\n      .then(() => {\r\n        alertService.success(\"Good Job. Post created!\");\r\n        getPaginationPosts();\r\n        getPaginationCount();\r\n      })\r\n      .catch((error: AxiosError) => {\r\n        alertService.error(\r\n          \"Image Post failed: \" + error.response?.data.errors.imageUrl\r\n            ? error.response?.data.errors.imageUrl\r\n            : error.response?.data.errors.description\r\n        );\r\n      });\r\n  };\r\n\r\n  const onDeletePost = (\r\n    event: React.MouseEvent<HTMLButtonElement>,\r\n    deletedPostId: string\r\n  ): void => {\r\n    event.preventDefault();\r\n    postService\r\n      .deletePost(deletedPostId)\r\n      .then(() => {\r\n        alertService.success(\"You deleted a Post.\");\r\n        getPaginationPosts();\r\n        getPaginationCount();\r\n      })\r\n      .catch((error: AxiosError) => {\r\n        alertService.error(\"Error: \" + error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"landingPage\">\r\n      <Pagination\r\n        className={\"pagination\"}\r\n        count={pageCount}\r\n        variant=\"outlined\"\r\n        page={page + 1}\r\n        onChange={handleChange}\r\n      />\r\n      <Navbar />\r\n      {activeUserContext.user && (\r\n        <div className=\"wrapContent\">\r\n          <AddPost user={activeUserContext.user} onAddPost={onAddPost} />\r\n          <Content\r\n            user={activeUserContext.user}\r\n            checkIfAuthorOrAdmin={activeUserContext.isAuthorOrAdmin}\r\n            posts={posts}\r\n            onDeletePost={onDeletePost}\r\n            setPosts={setPosts}\r\n          />\r\n          <UserInfo user={activeUserContext.user} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\DetailPage\\DetailPage.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\pages\\ErrorPages\\Unauthorized.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\Services\\AlertService.ts",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\Services\\PostService.ts",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\organisms\\Navbar.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\organisms\\UserInfo.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\organisms\\Content.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\organisms\\AddPost.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\molecules\\UserForm\\UserForm.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\molecules\\UserCard.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\molecules\\Post.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\molecules\\PostLikeDialog.tsx",[],"C:\\Work\\M223\\M223-FE-CICD\\src\\components\\molecules\\PostEditForm.tsx",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":184,"column":6,"nodeType":"123","endLine":184,"endColumn":8,"suggestions":"124"},{"ruleId":"121","severity":1,"message":"125","line":37,"column":6,"nodeType":"123","endLine":37,"endColumn":12,"suggestions":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["129"],"React Hook useEffect has a missing dependency: 'getPaginationPosts'. Either include it or remove the dependency array.",["130"],"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [loadActiveUser]",{"range":"135","text":"136"},"Update the dependencies array to be: [getPaginationPosts, page]",{"range":"137","text":"138"},[5972,5974],"[loadActiveUser]",[1264,1270],"[getPaginationPosts, page]"]